source('~/.active-rstudio-document')
library(R2jags)
model_code="
model {
y ~ dnorm(mu,1)
mu ~ dnorm(0,1)
}"
model=jags(data=list(y=1),
model.file=textConnection(model_code),
parameters.to.save = 'mu',
n.chains=1)
plot(model)
install.packages(c('R2jags',
'rjags',
'lubridate',
'tidyverse',
'forecast'))
library(R2jags)
model_code="
model {
y ~ dnorm(mu,1)
mu ~ dnorm(0,1)
}"
model=jags(data=list(y=1),
model.file=textConnection(model_code),
parameters.to.save = 'mu',
n.chains=1)
plot(model)
Sys.getenv("PATH")
system('g++ -v')
system('where make')
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR))
dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M))
file.create(M)
cat("\nCXXFLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat('Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")',
file = file.path(Sys.getenv("HOME"), ".Rprofile"),
sep = "\n", append = TRUE)
cat("\nCXXFLAGS += -Wno-ignored-attributes -Wno-deprecated-declarations",
file = M, sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
.
cat(M)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
Sys.setenv(MAKEFLAGS = "-j6")
install.packages("rstan", type = "source")
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
library(tidyverse.)
library(tidyverse)
profvis::profvis({
})
profvis::profvis({
})
profvis::profvis({pkglist <- c(
"mefa", "mefa4", "dclone", "ResourceSelection", "pbapply", "vegan",
"rgl","mgcv", "scatterplot3d", "permute", "rjags",
"coda", "snow", "R2WinBUGS", "rlecuyer", "Formula", "maptools",
"lme4", "R2OpenBUGS", "RODBC", "rgdal", "raster", "sp",
"reshape", "simba", "labdsv", "Hmisc", "untb", "ggplot2","pscl", "rpart", "gbm", "glmnet", "knitr", "ellipse",
"betareg", "pROC", "unmarked", "forecast",
"devtools", "akima", "data.table",
# additional R packages
"gstat", "spdep", "spatstat", "rgeos", "intrval", "MuMIn", "epiR")})
profvis::profvis({
})
install.packages('RODBC',dependencies=T)
system(paste0(Sys.getenv("R_HOME"), "/bin/x64/R.exe"), wait = FALSE, invisible = FALSE)
Sys.getenv("R_HOME")
system(paste0(Sys.getenv("R_HOME"), "/bin/i386/R.exe"), wait = FALSE, invisible = FALSE)
library(RODBC)
channel <- odbcConnectAccess("D:\Buren_files\GitHub\MMdb")
channel <- odbcConnectAccess("D:/Buren_files/GitHub/MMdb")
system(paste0(Sys.getenv("R_HOME"), "/bin/x64/R.exe"), wait = FALSE, invisible = FALSE)
system(paste0(Sys.getenv("R_HOME"), "/bin/i386/R.exe"), wait = FALSE, invisible = FALSE)
library(RODBC)
channel <- odbcConnectAccess("D:/Buren_files/GitHub/MMdb/mm_db_full.mdb")
qsel_Diet_Data <- SELECT qsel_diet_PreyItem_Collection.Year, qsel_diet_PreyItem_Collection.Month, qsel_diet_PreyItem_Collection.Day, qsel_diet_PreyItem_Collection.[Subunit Area], [tlkp_NAFO Div].[NAFO Div], [tlkp_NAFO Div].Area, [tlkp_NAFO Div].[Nfld/Gulf], qsel_diet_PreyItem_Collection.[Code Collector], qsel_diet_PreyItem_Collection.[Code MM sp], qsel_diet_PreyItem_Collection.[MM sp], qsel_diet_PreyItem_Collection.[ID Sex], qsel_diet_PreyItem_Collection.[Code DigestiveTractSection], qsel_diet_PreyItem_Collection.DigestiveTractSection, qsel_diet_PreyItem_Collection.[NAFC Code Prey Species], qsel_diet_PreyItem_Collection.Name, qsel_diet_PreyItem_Collection.[Measured Prey Species Wt(g)], qsel_diet_PreyItem_Collection.[Code Part measurement], qsel_diet_PreyItem_Collection.[Part Measurement], qsel_diet_PreyItem_Collection.[Number of Prey Units], qsel_diet_PreyItem_Collection.[Number of items measured], qsel_diet_PreyItem_Collection.[Number of individuals], qsel_diet_PreyItem_Collection.[Code Measured or Estimated], qsel_diet_PreyItem_Collection.Description, qsel_diet_PreyItem_Collection.[Part Measurement Value (mm)], qsel_diet_PreyItem_Collection.[Prey Item Length(cm)], qsel_diet_PreyItem_Collection.[Prey Item Weight(g)]
qsel_Diet_Data <- "SELECT qsel_diet_PreyItem_Collection.Year, qsel_diet_PreyItem_Collection.Month, qsel_diet_PreyItem_Collection.Day, qsel_diet_PreyItem_Collection.[Subunit Area], [tlkp_NAFO Div].[NAFO Div], [tlkp_NAFO Div].Area, [tlkp_NAFO Div].[Nfld/Gulf], qsel_diet_PreyItem_Collection.[Code Collector], qsel_diet_PreyItem_Collection.[Code MM sp], qsel_diet_PreyItem_Collection.[MM sp], qsel_diet_PreyItem_Collection.[ID Sex], qsel_diet_PreyItem_Collection.[Code DigestiveTractSection], qsel_diet_PreyItem_Collection.DigestiveTractSection, qsel_diet_PreyItem_Collection.[NAFC Code Prey Species], qsel_diet_PreyItem_Collection.Name, qsel_diet_PreyItem_Collection.[Measured Prey Species Wt(g)], qsel_diet_PreyItem_Collection.[Code Part measurement], qsel_diet_PreyItem_Collection.[Part Measurement], qsel_diet_PreyItem_Collection.[Number of Prey Units], qsel_diet_PreyItem_Collection.[Number of items measured], qsel_diet_PreyItem_Collection.[Number of individuals], qsel_diet_PreyItem_Collection.[Code Measured or Estimated], qsel_diet_PreyItem_Collection.Description, qsel_diet_PreyItem_Collection.[Part Measurement Value (mm)], qsel_diet_PreyItem_Collection.[Prey Item Length(cm)], qsel_diet_PreyItem_Collection.[Prey Item Weight(g)]
""
ls()
qsel_Diet_Data <- "SELECT qsel_diet_PreyItem_Collection.Year, qsel_diet_PreyItem_Collection.Month, qsel_diet_PreyItem_Collection.Day, qsel_diet_PreyItem_Collection.[Subunit Area], [tlkp_NAFO Div].[NAFO Div], [tlkp_NAFO Div].Area, [tlkp_NAFO Div].[Nfld/Gulf], qsel_diet_PreyItem_Collection.[Code Collector], qsel_diet_PreyItem_Collection.[Code MM sp], qsel_diet_PreyItem_Collection.[MM sp], qsel_diet_PreyItem_Collection.[ID Sex], qsel_diet_PreyItem_Collection.[Code DigestiveTractSection], qsel_diet_PreyItem_Collection.DigestiveTractSection, qsel_diet_PreyItem_Collection.[NAFC Code Prey Species], qsel_diet_PreyItem_Collection.Name, qsel_diet_PreyItem_Collection.[Measured Prey Species Wt(g)], qsel_diet_PreyItem_Collection.[Code Part measurement], qsel_diet_PreyItem_Collection.[Part Measurement], qsel_diet_PreyItem_Collection.[Number of Prey Units], qsel_diet_PreyItem_Collection.[Number of items measured], qsel_diet_PreyItem_Collection.[Number of individuals], qsel_diet_PreyItem_Collection.[Code Measured or Estimated], qsel_diet_PreyItem_Collection.Description, qsel_diet_PreyItem_Collection.[Part Measurement Value (mm)], qsel_diet_PreyItem_Collection.[Prey Item Length(cm)], qsel_diet_PreyItem_Collection.[Prey Item Weight(g)]
FROM [tlkp_NAFO Div] RIGHT JOIN qsel_diet_PreyItem_Collection ON [tlkp_NAFO Div].[Subunit Area] = qsel_diet_PreyItem_Collection.[Subunit Area]"
data <- sqlQuery( channel , qsel_Diet_Data)
dim(data)
qsel_Diet_Data <- "SELECT qsel_diet_PreyItem_Collection.Year, qsel_diet_PreyItem_Collection.Month, qsel_diet_PreyItem_Collection.Day, qsel_diet_PreyItem_Collection.[Subunit Area], [tlkp_NAFO Div].[NAFO Div], [tlkp_NAFO Div].Area, [tlkp_NAFO Div].[Nfld/Gulf], qsel_diet_PreyItem_Collection.[Code Collector], qsel_diet_PreyItem_Collection.[Code MM sp], qsel_diet_PreyItem_Collection.[MM sp], qsel_diet_PreyItem_Collection.[ID Sex], qsel_diet_PreyItem_Collection.[Code DigestiveTractSection], qsel_diet_PreyItem_Collection.DigestiveTractSection, qsel_diet_PreyItem_Collection.[NAFC Code Prey Species], qsel_diet_PreyItem_Collection.Name, qsel_diet_PreyItem_Collection.[Measured Prey Species Wt(g)], qsel_diet_PreyItem_Collection.[Code Part measurement], qsel_diet_PreyItem_Collection.[Part Measurement], qsel_diet_PreyItem_Collection.[Number of Prey Units], qsel_diet_PreyItem_Collection.[Number of items measured], qsel_diet_PreyItem_Collection.[Number of individuals], qsel_diet_PreyItem_Collection.[Code Measured or Estimated], qsel_diet_PreyItem_Collection.Description, qsel_diet_PreyItem_Collection.[Part Measurement Value (mm)], qsel_diet_PreyItem_Collection.[Prey Item Length(cm)], qsel_diet_PreyItem_Collection.[Prey Item Weight(g)]
FROM [tlkp_NAFO Div] RIGHT JOIN qsel_diet_PreyItem_Collection ON [tlkp_NAFO Div].[Subunit Area] = qsel_diet_PreyItem_Collection.[Subunit Area];"
data <- sqlQuery( channel , qsel_Diet_Data)
data
rm(data)
channel <- odbcConnectAccess("D:/Buren_files/GitHub/MMdb/mm_db_queries.accdb")
qsel_Diet_Data <- "SELECT qsel_diet_PreyItem_Collection.Year, qsel_diet_PreyItem_Collection.Month, qsel_diet_PreyItem_Collection.Day, qsel_diet_PreyItem_Collection.[Subunit Area], [tlkp_NAFO Div].[NAFO Div], [tlkp_NAFO Div].Area, [tlkp_NAFO Div].[Nfld/Gulf], qsel_diet_PreyItem_Collection.[Code Collector], qsel_diet_PreyItem_Collection.[Code MM sp], qsel_diet_PreyItem_Collection.[MM sp], qsel_diet_PreyItem_Collection.[ID Sex], qsel_diet_PreyItem_Collection.[Code DigestiveTractSection], qsel_diet_PreyItem_Collection.DigestiveTractSection, qsel_diet_PreyItem_Collection.[NAFC Code Prey Species], qsel_diet_PreyItem_Collection.Name, qsel_diet_PreyItem_Collection.[Measured Prey Species Wt(g)], qsel_diet_PreyItem_Collection.[Code Part measurement], qsel_diet_PreyItem_Collection.[Part Measurement], qsel_diet_PreyItem_Collection.[Number of Prey Units], qsel_diet_PreyItem_Collection.[Number of items measured], qsel_diet_PreyItem_Collection.[Number of individuals], qsel_diet_PreyItem_Collection.[Code Measured or Estimated], qsel_diet_PreyItem_Collection.Description, qsel_diet_PreyItem_Collection.[Part Measurement Value (mm)], qsel_diet_PreyItem_Collection.[Prey Item Length(cm)], qsel_diet_PreyItem_Collection.[Prey Item Weight(g)]
FROM [tlkp_NAFO Div] RIGHT JOIN qsel_diet_PreyItem_Collection ON [tlkp_NAFO Div].[Subunit Area] = qsel_diet_PreyItem_Collection.[Subunit Area];"
data <- sqlQuery( channel , qsel_Diet_Data)
channel
channel <- odbcConnectAccess("D:/Buren_files/GitHub/MMdb/mm_db_queries.accdb")
channel <- odbcConnectAccess("D:/Buren_files/GitHub/MMdb/mm_db_queries.accdb")
library(ggplot2)
library(lubridate)
setwd('D:/Buren_files/GitHub/PG_Growth/')
age <- read.csv('data/PG_age.csv', header = T, as.is = T)
growth <- read.csv('data/PG_growth.csv', header = T, as.is = T)
data <- merge(growth, age[,c('idsex', 'cohortage')], by = 'idsex', all.x = T)
data$dayf <- ifelse(is.na(data$day), 1, data$day)
data$dates <- ymd(paste(data$year,"-",data$month,"-",data$dayf,sep = ""))
data$mdates <- ymd(paste('2800',"-",data$month,"-",data$dayf,sep = ""))
for (i in 1:nrow(data)) {
if(!is.na(data[i, 'dates'])) {
if(data$month[i] > 7) {
data$mdates[i] <- data$mdates[i] - years(1)
}
}
}
eliminate <- c(0, 91:93,99)
data <- data[which(!data$cohortage %in% eliminate),]
data <- subset(data, sex != 'U')
subset(data, cohortage == 99)
data$ageclass <- ifelse(data$cohortage > 7, '8+', data$cohortage)
g <- ggplot(data[which(!is.na(data$ageclass)),], aes(ageclass, weight))
g <- g + geom_violin()
print(g)
data$dates
str(data)
data$mdates
unique(data$mdates)
as.Date(2799-10-23):as.Date(2800-01-01)
ymd(2799-10-23):ymd(2800-01-01)
ymd('2799-10-23'):ymd('2800-01-01')
ymd('2799-10-23')
ymd(ymd('2799-10-23'):ymd('2800-01-01'))
(ymd('2799-10-23'):ymd('2800-01-01'))
as.Date(ymd('2799-10-23'):ymd('2800-01-01'))
ymd('2800-01-01')
t1 <- ymd('2799-09-01')
t2 <- ymd('2800-02-29')
t1
t2
aa <- data[data$mdates %in% t1:t2, ]
aa
head(aa)
aa[,c('year', 'month','day')]
unique(aa[,c('year', 'month','day')])
unique(aa[,c('year', 'month')])
rm(aa)
data[data$mdates %in% t1:t2, 'trueage'] <- data[data$mdates %in% t1:t2, 'cohortage'] - 1
data[data$mdates %in% t1:t2, 'trueage']
data[data$mdates %in% t1:t2, c('trueage','cohortage')]
data$ageclass <- ifelse(data$trueage > 7, '8+', data$trueage)
g <- ggplot(data[which(!is.na(data$ageclass)),], aes(ageclass, weight))
g <- g + geom_violin()
print(g)
unique(data[which(!is.na(data$ageclass)),'cohortage'])
age1 <- subset(data, cohortage == 1)
age1[which(age1$weight > 50),]
p <- ggplot(data , aes(as.POSIXct(mdates), weight, colour = sex))
p <- p + geom_point()
p <- p + scale_x_datetime(date_breaks = "1 months")
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + xlab("Date")
p <- p + facet_wrap(~ageclass, ncol = 1, scales = "free_y")
print(p)
## ADB August 17, 2017
## Purpose of script: analyze growth of harp seals
##                    - seasonal growth
##                    - decadal changes in growth, acconting for seasonality
## Data:
##    Morph data from qsel_growth in mm_db_queries.accdb
##    Age data from qsel_age in mm_db_queries.accdb
## load libraries ----
library(ggplot2)
library(lubridate)
## read data ----
setwd('D:/Buren_files/GitHub/PG_Growth/')
age <- read.csv('data/PG_age.csv', header = T, as.is = T)
growth <- read.csv('data/PG_growth.csv', header = T, as.is = T)
## merge data sets ----
data <- merge(growth, age[,c('idsex', 'cohortage')], by = 'idsex', all.x = T)
## wrangle data set ----
# Create dates
data$dayf <- ifelse(is.na(data$day), 1, data$day)
data$dates <- ymd(paste(data$year,"-",data$month,"-",data$dayf,sep = ""))
data$mdates <- ymd(paste('2800',"-",data$month,"-",data$dayf,sep = ""))
for (i in 1:nrow(data)) {
if(!is.na(data[i, 'dates'])) {
if(data$month[i] > 7) {
data$mdates[i] <- data$mdates[i] - years(1)
}
}
}
# Eliminate foetus, stillborns and starvlings, and YOY
# There is one seal of unknown sex, also eliminate it
# age = 99 does not include any individual in the previous categories. age=99 is unknown
eliminate <- c(0, 91:93,99)
data <- data[which(!data$cohortage %in% eliminate),]
data <- subset(data, sex != 'U')
subset(data, cohortage == 99)
## calculate true age
## between Sep 1 and Feb 29, substract 1 from cohort age
## between March 1 and Aug 30, set trueage = cohortage
data$trueage <- data$cohortage
t1 <- ymd('2799-09-01')
t2 <- ymd('2800-02-29')
data[data$mdates %in% t1:t2, 'trueage'] <- data[data$mdates %in% t1:t2, 'cohortage'] - 1
# create age classes
data$ageclass <- ifelse(data$trueage > 7, '8+', data$trueage)
# find outliers in weight by age class
g <- ggplot(data[which(!is.na(data$ageclass)),], aes(ageclass, weight))
g <- g + geom_violin()
print(g)
unique(data[which(!is.na(data$ageclass)),'cohortage'])
age1 <- subset(data, cohortage == 1)
age1[which(age1$weight > 50),]
## There is an issue with cohort age! transform to real ages ----
## plots ----
p <- ggplot(data , aes(as.POSIXct(mdates), weight, colour = sex))
p <- p + geom_point()
p <- p + scale_x_datetime(date_breaks = "1 months")
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p <- p + xlab("Date")
p <- p + facet_wrap(~ageclass, ncol = 1, scales = "free_y")
print(p)
p2 <- ggplot(data , aes(as.POSIXct(dates), weight, colour = sex))
p2 <- p2 + geom_point()
p2 <- p2 + scale_x_datetime(date_breaks = "1 months")
p2 <- p2 + theme_bw()
p2 <- p2 + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2 <- p2 + xlab("Date")
print(p2)
g
p
t1:t2
length(t1:t2)
303210-303029
p2
p3 <- ggplot(data , aes(as.POSIXct(dates), weight, colour = sex))
p3 <- p3 + geom_point()
p3 <- p3 + scale_x_datetime(date_breaks = "1 months")
p3 <- p3 + theme_bw()
p3 <- p3 + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p3 <- p3 + xlab("Date")
p3 <- p3 + facet_wrap(~ageclass, ncol = 1, scales = "free_y")
print(p3)
age1[which(age1$weight > 75),]
age0 <- subset(data, trueage == 0)
check <- age0[which(age0$weight > 75),]
check
age0 <- subset(data, trueage == 0)
check <- age0[which(age0$weight > 75),]
age1 <- subset(data, trueage == 0)
check <- rbind(check, age1[which(age1$weight > 100),])
check
age1[which(age1$weight > 100),]
rm(check)
rm(age0)
rm(age1)
rm(age2)
age0 <- subset(data, trueage == 0)
check <- age0[which(age0$weight > 75),]
age1 <- subset(data, trueage == 1)
check <- rbind(check, age1[which(age1$weight > 100),])
check
age2 <- subset(data, cohortage == 2)
check <- age2[which(age1$weight > 105),]
age0 <- subset(data, trueage == 0)
check <- age0[which(age0$weight > 75),]
age1 <- subset(data, trueage == 1)
check <- rbind(check, age1[which(age1$weight > 100),])
age2[which(age1$weight > 105),]
age2[which(age2$weight > 105),]
age3 <- subset(data, cohortage == 3)
check <- age3[which(age3$weight > 150),]
check
age3[which(age3$weight > 150),]
age3 <- subset(data, trueage == 3)
age3[which(age3$weight > 150),]
age0 <- subset(data, trueage == 0)
check <- age0[which(age0$weight > 75),]
age1 <- subset(data, trueage == 1)
check <- rbind(check, age1[which(age1$weight > 100),])
age2 <- subset(data, trueage == 2)
check <- rbind(check,age2[which(age2$weight > 105),] )
age3 <- subset(data, trueage == 3)
check <- rbind(check,age3[which(age3$weight > 150),])
check
check[order(check$idsex),]
with(data,plot(length,weight))
under <- subset(data, length > 140 & weight < 15)
under
locator()
subset(data, length > 110 & length <120 & weight > 75)
check <- rbind(check,
subset(data, length > 100 & length <105 & weight > 57)
check[order(check$idsex),]
check <- rbind(check,
subset(data, length > 100 & length <105 & weight > 57)
check[order(check$idsex),]
subset(data, length > 100 & length <105 & weight > 57)
check <- rbind(check,
subset(data, length > 128 & length <140 & weight > 100)
)
subset(data, length > 128 & length <140 & weight > 100)
abline(h=113.5, lty=2)
rm(c(age0, age1, age2, age3))
rm(c(age0, age1, age2, age3))
age0 <- subset(data, trueage == 0)
check <- age0[which(age0$weight > 75),]
View(age)
rm(age0)
rm(age1)
rm(age2)
rm(age3)
check$issue <- '2heavy4age'
tocheck <- subset(data, trueage == 0)
check <- tocheck[which(tocheck$weight > 75),]
tocheck <- subset(data, trueage == 1)
check <- rbind(check, tocheck[which(tocheck$weight > 100),])
tocheck <- subset(data, trueage == 2)
check <- rbind(check,tocheck[which(tocheck$weight > 105),] )
tocheck <- subset(data, trueage == 3)
check <- rbind(check,tocheck[which(tocheck$weight > 150),])
check$issue <- '2heavy4age'
check
check <- rbind(check, cbind(subset(data, length > 140 & weight < 15), issue = '2light4length'
))
check
tocheck <- subset(data, trueage == 0)
check <- tocheck[which(tocheck$weight > 75),]
tocheck <- subset(data, trueage == 1)
check <- rbind(check, tocheck[which(tocheck$weight > 100),])
tocheck <- subset(data, trueage == 2)
check <- rbind(check,tocheck[which(tocheck$weight > 105),] )
tocheck <- subset(data, trueage == 3)
check <- rbind(check,tocheck[which(tocheck$weight > 150),])
check$issue <- '2heavy4age'
with(data,plot(length,weight))
check <- rbind(check, cbind(subset(data, length > 140 & weight < 15), issue = '2light4length'))
check <- rbind(check, cbind(subset(data, length > 110 & length < 120 & weight > 75), issue = '2heavy4length'))
check <- rbind(check, cbind(subset(data, length > 100 & length < 105 & weight > 57), issue = '2heavy4length'))
check <- rbind(check, cbind(subset(data, length > 128 & length < 140 & weight > 100), issue = '2heavy4length'))
check[order(check$issue, check$idsex),]
dim(check)
dim(unique(check$idsex))
length(unique(check$idsex))
check[order( check$idsex),]
check[order( check$idsex),]
dim(check[order( check$idsex),])
locator()
subset(data, length > 139 & length < 141 & weight > 117)
subset(data, length > 149 & length < 151 & weight > 145)
rm(check)
rm(tocheck)
tocheck <- subset(data, trueage == 0)
check <- tocheck[which(tocheck$weight > 75),]
tocheck <- subset(data, trueage == 1)
check <- rbind(check, tocheck[which(tocheck$weight > 100),])
tocheck <- subset(data, trueage == 2)
check <- rbind(check,tocheck[which(tocheck$weight > 105),] )
tocheck <- subset(data, trueage == 3)
check <- rbind(check,tocheck[which(tocheck$weight > 150),])
check$issue <- '2heavy4age'
with(data,plot(length,weight))
check <- rbind(check, cbind(subset(data, length > 140 & weight < 15), issue = '2light4length'))
check <- rbind(check, cbind(subset(data, length > 110 & length < 120 & weight > 75), issue = '2heavy4length'))
check <- rbind(check, cbind(subset(data, length > 100 & length < 105 & weight > 57), issue = '2heavy4length'))
check <- rbind(check, cbind(subset(data, length > 128 & length < 140 & weight > 100), issue = '2heavy4length'))
check <- rbind(check, cbind(subset(data, length > 139 & length < 141 & weight > 117), issue = '2heavy4length'))
check <- rbind(check, cbind(subset(data, length > 149 & length < 151 & weight > 145), issue = '2heavy4length'))
rm(tocheck)
abline(h=146, lty=2)
abline(h=119, lty=2)
check
dim(check)
dim(unique(check$idsex)
)
dim(unique(check$idsex))
length(unique(check$idsex))
check[order( check$idsex),]
abline(v=check$weight, lty=2)
with(data,plot(length,weight))
abline(h=check$weight, lty=2)
abline(v=check$length, lty=2)
check[order( check$idsex),]
check[order( check$idsex),]
getwd()
write.csv(check, 'output/check_weights.csv', row.names = F)
names(check)
names(check) - c("mdates")
check[,c('idsex', 'nafo', 'year', 'month', 'day', 'weight', 'length', 'pelage', 'cohortage', 'issue')]
check[order( check$idsex),]
check[,c('idsex', 'nafo', 'year', 'month', 'day', 'weight', 'length', 'pelage', 'cohortage', 'issue')]
check[order( check$idsex),c('idsex', 'nafo', 'year', 'month', 'day', 'weight', 'length', 'pelage', 'cohortage', 'issue')]
rm(check)
rm(tocheck)
## check ----
tocheck <- subset(data, trueage == 0)
check <- tocheck[which(tocheck$weight > 75),]
tocheck <- subset(data, trueage == 1)
check <- rbind(check, tocheck[which(tocheck$weight > 100),])
tocheck <- subset(data, trueage == 2)
check <- rbind(check,tocheck[which(tocheck$weight > 105),] )
tocheck <- subset(data, trueage == 3)
check <- rbind(check,tocheck[which(tocheck$weight > 150),])
check$issue <- '2heavy4age'
with(data,plot(length,weight))
check <- rbind(check, cbind(subset(data, length > 140 & weight < 15), issue = '2light4length'))
check <- rbind(check, cbind(subset(data, length > 110 & length < 120 & weight > 75), issue = '2heavy4length'))
check <- rbind(check, cbind(subset(data, length > 100 & length < 105 & weight > 57), issue = '2heavy4length'))
check <- rbind(check, cbind(subset(data, length > 128 & length < 140 & weight > 100), issue = '2heavy4length'))
check <- rbind(check, cbind(subset(data, length > 139 & length < 141 & weight > 117), issue = '2heavy4length'))
check <- rbind(check, cbind(subset(data, length > 149 & length < 151 & weight > 145), issue = '2heavy4length'))
rm(tocheck)
#check[order( check$idsex),]
check <- check[order( check$idsex),c('idsex', 'nafo', 'year', 'month', 'day', 'weight', 'length', 'pelage', 'cohortage', 'issue')]
write.csv(check, 'output/check_weights.csv', row.names = F)
